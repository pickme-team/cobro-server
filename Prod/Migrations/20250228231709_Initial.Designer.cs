// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Prod.Services;

#nullable disable

namespace Prod.Migrations
{
    [DbContext(typeof(ProdContext))]
    [Migration("20250228231709_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Prod.Models.Database.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Books");

                    b.HasDiscriminator<string>("Type").HasValue("Book");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Prod.Models.Database.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("Prod.Models.Database.PlaceCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Count");
                });

            modelBuilder.Entity("Prod.Models.Database.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Prod.Models.Database.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Prod.Models.Database.PlaceBook", b =>
                {
                    b.HasBaseType("Prod.Models.Database.Book");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uuid");

                    b.HasIndex("PlaceId");

                    b.HasDiscriminator().HasValue("Place");
                });

            modelBuilder.Entity("Prod.Models.Database.RoomBook", b =>
                {
                    b.HasBaseType("Prod.Models.Database.Book");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoomId");

                    b.HasDiscriminator().HasValue("Room");
                });

            modelBuilder.Entity("Prod.Models.Database.SpaceBook", b =>
                {
                    b.HasBaseType("Prod.Models.Database.Book");

                    b.HasDiscriminator().HasValue("Space");
                });

            modelBuilder.Entity("Prod.Models.Database.Book", b =>
                {
                    b.HasOne("Prod.Models.Database.User", "User")
                        .WithMany("Books")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prod.Models.Database.PlaceBook", b =>
                {
                    b.HasOne("Prod.Models.Database.Place", "Place")
                        .WithMany("Books")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Prod.Models.Database.RoomBook", b =>
                {
                    b.HasOne("Prod.Models.Database.Room", "Room")
                        .WithMany("Books")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Prod.Models.Database.Place", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Prod.Models.Database.Room", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Prod.Models.Database.User", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
