@page "/scan-qr"
@using Prod.Exceptions
@using Prod.Models.Database
@using Prod.Services
@inject IBookService BookService
@inject IJSRuntime JsRuntime
@inject IQrCodeService QrService
@inject IUserService UserService
@rendermode InteractiveServer

<h3>Сканировать QR</h3>

<div class="select">
    <button @onclick="GetCameras">Get Cameras</button>
    <label for="videoSource"></label>
    <select id="@videoSourceId"></select>
    <button @onclick="StartCamera">Open Camera</button>
    <button @onclick="StopCamera">Stop Camera</button>
</div>

<video id="videoElement" width="300" height="200"></video>
<canvas id="canvasElement" style="display:none;"></canvas>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger">@_errorMessage</div>
}

@if (_book != null && _user != null)
{
    <div>
        <h4>Информация о бронировании</h4>
        <p>Описание: @_book.Description</p>
        <p>Дата начала: @_book.Start</p>
        <p>Дата окончания: @_book.End</p>
        <p>Статус: @_book.Status</p>
        <button @onclick="ChangeStatusToActive">Подтвердить</button>

        @if (_user.Passport != null)
        {
            <div class="passport-info">
                <h4>Паспортные данные</h4>
                <div class="passport-header">
                    <img src="@_user.AvatarUrl" alt="Avatar" class="passport-avatar"/>
                    <div class="passport-details">
                        <p>Фамилия: @_user.Passport.Lastname</p>
                        <p>Имя: @_user.Passport.Firstname</p>
                        <p>Отчество: @_user.Passport.Middlename</p>
                    </div>
                </div>
                <div class="passport-details">
                    <p>Серия: @_user.Passport.Serial</p>
                    <p>Номер: @_user.Passport.Number</p>
                </div>
            </div>
        }
    </div>
}

@code {
    private Book? _book;
    private User? _user;
    private string? _errorMessage;
    private string? _qrCode;
    private string videoSourceId = "videoSource";
    private Timer? _timer;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }

        return Task.CompletedTask;
    }

    public async Task ReturnBarcodeResultsAsync(string qrCode)
    {
        try
        {
            _qrCode = qrCode;
            var id = QrService[long.Parse(qrCode)];

            if (id is not null)
            {
                _book = await BookService.GetBookById(id.Value);
                _user = _book?.User;
                if (_book is null)
                    throw new Exception("Бронирование уже не существует");
            }
            else
                throw new Exception("Неверный код");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Ошибка: {ex.Message}";
        }

        StateHasChanged();
    }

    public Task GetCameras()
    {
        return Task.CompletedTask;
        // TODO Реализуйте получение списка камер
    }

    public async Task StartCamera()
    {
        try
        {
            await JsRuntime.InvokeVoidAsync("jsFunctions.startCamera", "videoElement");
            _timer = new Timer((_) => CaptureAndScanFrame().ConfigureAwait(false), null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
        }
        catch (TaskCanceledException)
        {
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
    }


    public async Task StopCamera()
    {
        await JsRuntime.InvokeVoidAsync("jsFunctions.stopCamera", "videoElement");
        _timer?.Dispose();
    }

    private async Task CaptureAndScanFrame()
    {
        try
        {
            using (var cts = new CancellationTokenSource(TimeSpan.FromSeconds(1)))
            {
                string dataUrl = await JsRuntime.InvokeAsync<string>("jsFunctions.captureFrame", cts.Token, "videoElement", "canvasElement");
                byte[] imageBytes = Convert.FromBase64String(dataUrl.Split(',')[1]);

                string? result = await QrService.ScanQrCode(imageBytes);
                if (!string.IsNullOrEmpty(result))
                {
                    await ReturnBarcodeResultsAsync(result);
                }
            }
        }
        catch (TaskCanceledException)
        {
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task ChangeStatusToActive()
    {
        try
        {
            await BookService.ConfirmQr(new ConfirmQrRequest() { Code = _qrCode ?? "" });
            if (_book != null)
            {
                _book.Status = Status.Active;
            }

            StateHasChanged();
        }
        catch (ForbiddenException)
        {
            _errorMessage = $"Неверный QR код";
        }
    }

}

<style>
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: block;
    }

    .modal-content {
        background-color: #fff;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover,
    .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }

    .client-info {
        display: flex;
        align-items: center;
    }

    .client-details {
        flex: 1;
    }

    .passport-info {
        border: 1px solid #888;
        padding: 10px;
        margin-top: 20px;
        background-color: #f9f9f9;
    }

    .passport-header {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

    .passport-avatar {
        max-width: 100px;
        border-radius: 20% / 50%;
        margin-right: 20px;
    }

    .passport-details p {
        margin: 5px 0;
    }

    .filters {
        margin-bottom: 20px;
    }
</style>
