@page "/scan-qr"
@using Prod.Exceptions
@using Prod.Models.Database
@using Prod.Services
@inject IBookService BookService
@inject IJSRuntime JsRuntime
@inject IQrCodeService QrService
@rendermode InteractiveServer

<h3>Сканировать QR</h3>

<div class="select">
    <button @onclick="GetCameras">Get Cameras</button>
    <label for="videoSource"></label>
    <select id="@videoSourceId"></select>
    <button @onclick="StartCamera">Open Camera</button>
    <button @onclick="StopCamera">Stop Camera</button>
</div>

<div id="videoview">
    <div class="dce-video-container" id="@videoContainerId"></div>
    <canvas id="@overlayId"></canvas>
</div>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger">@_errorMessage</div>
}

@if (_book != null)
{
    <div>
        <h4>Информация о бронировании</h4>
        <p>Описание: @_book.Description</p>
        <p>Дата начала: @_book.Start</p>
        <p>Дата окончания: @_book.End</p>
        <p>Статус: @_book.Status</p>
        <button @onclick="ChangeStatusToActive">Изменить статус на Active</button>
    </div>
}

@code {
    private Book? _book;
    private string? _errorMessage;
    private string? _qrCode;
    private String result = "";
    private DotNetObjectReference<ScanQR>? objRef;
    private string videoSourceId = "videoSource";
    private string overlayId = "overlay";
    private string videoContainerId = "videoContainer";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // await JsRuntime.InvokeAsync<Boolean>("jsFunctions.setLicense", Environment.GetEnvironmentVariable("QR_LICENSE"));
            await JsRuntime.InvokeAsync<Boolean>("jsFunctions.setLicense", "DLS2eyJoYW5kc2hha2VDb2RlIjoiMTAzNzUzNTE3LVRYbFFjbTlxIiwibWFpblNlcnZlclVSTCI6Imh0dHBzOi8vbWRscy5keW5hbXNvZnRvbmxpbmUuY29tIiwib3JnYW5pemF0aW9uSUQiOiIxMDM3NTM1MTciLCJzdGFuZGJ5U2VydmVyVVJMIjoiaHR0cHM6Ly9zZGxzLmR5bmFtc29mdG9ubGluZS5jb20iLCJjaGVja0NvZGUiOjkzMDAyMTQ0MX0=");
            objRef = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeAsync<Boolean>("jsFunctions.initScanner", objRef, videoContainerId, videoSourceId, overlayId);
            StateHasChanged();
        }
    }
    
    [JSInvokable]
    public async Task ReturnBarcodeResultsAsync(string qrCode)
    {
        try
        {
            _qrCode = qrCode;
            var id = QrService[long.Parse(qrCode)];

            if (id is not null)
            {
                _book = await BookService.GetBookById(id.Value);
                if (_book is null)
                    throw new Exception("Бронирование уже не существует");
            }
            else
                throw new Exception("Неверный код");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Ошибка: {ex.Message}";
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    public async Task GetCameras()
    {
        await JsRuntime.InvokeVoidAsync("jsFunctions.getCameras");
    }

    public async Task StartCamera()
    {
        await JsRuntime.InvokeVoidAsync("jsFunctions.startCamera");
    }

    public async Task StopCamera()
    {
        await JsRuntime.InvokeVoidAsync("jsFunctions.stopCamera");
    }

    private async Task ChangeStatusToActive()
    {
        try
        {
            await BookService.ConfirmQr(new ConfirmQrRequest() { Code = _qrCode });
            if (_book != null)
            {
                _book.Status = Status.Active;
            }
            StateHasChanged();
        }
        catch (ForbiddenException ex)
        {
            _errorMessage = $"Неверный QR код";
        }
    }
}