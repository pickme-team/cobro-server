@page "/books"
@using Prod.Models.Database
@using Prod.Services
@inject IBookService BookService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<h3>Бронирования</h3>

<div class="filters">
    <input type="text" placeholder="Поиск по имени пользователя" @bind="userNameFilter"/>
    <label>Дата начала:</label>
    <input type="datetime-local" @bind="startDateFilter"/>
    <label>Дата окончания:</label>
    <input type="datetime-local" @bind="endDateFilter"/>
    <button @onclick="ApplyFilters">Применить фильтры</button>
</div>

@code {
    private List<Book> _books = new();
    private List<Book> _filteredBooks = new();
    private User? _selectedUser;
    private bool _showModal;
    private string? _errorMessage;
    private bool _showEditModal;
    private Guid _editingBookId;
    private DateTime _editStart;
    private DateTime _editEnd;
    private string userNameFilter = string.Empty;
    private DateTime? startDateFilter;
    private DateTime? endDateFilter;

    protected override async Task OnInitializedAsync()
    {
        await GetBooks();
        ApplyFilters();
    }

    private async Task GetBooks()
    {
        try
        {
            _books = await BookService.GetAllActiveBooks();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Ошибка: {ex.Message}";
        }
    }

    private void ShowUserInfo(Guid bookId)
    {
        var book = _books.FirstOrDefault(b => b.Id == bookId)!;
        _selectedUser = book.User;
        _showModal = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        _showModal = false;
        _showEditModal = false;
    }

    private async Task CancelBook(Guid bookId)
    {
        try
        {
            // Throws if book isnt found
            await BookService.CancelBook(bookId);
            var book = _books.First(b => b.Id == bookId);
            _books.Remove(book);
            ApplyFilters();
            StateHasChanged();
        }
        catch (InvalidOperationException)
        {
        }
        catch (Exception ex)
        {
            _errorMessage = $"Ошибка: {ex.Message}";
        }
    }

    private void EditDates(Guid bookId, DateTime start, DateTime end)
    {
        _editingBookId = bookId;
        _editStart = start.ToUniversalTime();
        _editEnd = end.ToUniversalTime();
        _showEditModal = true;
    }

    private async Task SaveDates()
    {
        try
        {
            await BookService.EditDateBook(_editingBookId, _editStart, _editEnd);
            var book = _books.FirstOrDefault(b => b.Id == _editingBookId);
            if (book != null)
            {
                book.Start = _editStart;
                book.End = _editEnd;
                ApplyFilters();
                StateHasChanged();
            }

            CloseModal();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Ошибка: {ex.Message}";
        }
    }

    private void ApplyFilters()
    {
        _filteredBooks = _books.Where(b =>
            (string.IsNullOrEmpty(userNameFilter) || b.User.Name.Contains(userNameFilter, StringComparison.OrdinalIgnoreCase)) &&
            (!startDateFilter.HasValue || b.Start >= startDateFilter.Value.ToUniversalTime()) &&
            (!endDateFilter.HasValue || b.End <= endDateFilter.Value.ToUniversalTime())).ToList();
        StateHasChanged();
    }

    private string GetGroupName(string typeName) => typeName switch
    {
        nameof(OpenBook) => "Опенспейс",
        nameof(OfficeBook) => "Места в офисе",
        nameof(TalkroomBook) => "Комнаты",
        _ => "Остальное"
    };

}

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger">@_errorMessage</div>
}

@foreach (var group in _filteredBooks.GroupBy(b => b.GetType().Name))
{
    <h4>@GetGroupName(group.Key)</h4>
    <ul>
        @foreach (var book in group)
        {
            <li>
                <p>Бронирование #@book.Id.ToString().Split('-').Last(): @book.Description</p>
                <p>Статус: @book.Status</p>
                <p>Дата начала: @book.Start.ToUniversalTime()</p>
                <p>Дата окончания: @book.End.ToUniversalTime()</p>
                <button @onclick="() => ShowUserInfo(book.Id)">Информация о клиенте</button>
                <button @onclick="() => CancelBook(book.Id)">Отменить</button>
                @if (book.Status == Status.Pending)
                {
                    <button @onclick="() => EditDates(book.Id, book.Start, book.End)">Редактировать</button>
                }
            </li>
        }
    </ul>
}

@if (_showModal && _selectedUser != null)
{
    <div class="modal" style="display: block;">
        <div class="modal-content">
            <span class="close" @onclick="CloseModal">&times;</span>
            <h4>Информация о клиенте</h4>
            <div class="client-info">
                <div class="client-details">
                    <p>Имя: @_selectedUser.Name</p>
                    <p>Email: @_selectedUser.Email</p>
                    <p>Роль: @_selectedUser.Role</p>
                </div>
                @if (_selectedUser.AvatarUrl != null)
                {
                    <div class="client-avatar">
                        <img src="@_selectedUser.AvatarUrl.ToString()" alt="Avatar"/>
                    </div>
                }
            </div>
        </div>
    </div>
}

@if (_showEditModal)
{
    <div class="modal" style="display: block;">
        <div class="modal-content">
            <span class="close" @onclick="CloseModal">&times;</span>
            <h4>Редактировать даты</h4>
            <div>
                <label>Дата начала:</label>
                <input type="datetime-local" @bind="(_editStart)" step="900"/>
            </div>
            <div>
                <label>Дата окончания:</label>
                <input type="datetime-local" @bind="(_editEnd)" step="900"/>
            </div>
            <button @onclick="SaveDates">Сохранить</button>
        </div>
    </div>

    <style>
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: block;
        }

        .modal-content {
            background-color: #fff;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 60%;
            max-width: 500px;
            max-height: 70%;
            overflow: auto;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        .client-info {
            display: flex;
            align-items: center;
        }

        .client-details {
            flex: 1;
        }

        .client-avatar {
            margin-left: 20px;
        }

        .client-avatar img {
            max-width: 100px;
            border-radius: 20% / 50%;
        }

        .filters {
            margin-bottom: 20px;
        }
    </style>
}
