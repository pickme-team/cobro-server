image: mcr.microsoft.com/dotnet/sdk:9.0

stages:
  - build
  - test
  - publish
  - deploy

variables:
  PROJECT_NAME: "Prod"
  TEST_PROJECT_NAME: "Prod.Tests"
  TEST_INTG_PROJECT_NAME: "Prod.Tests.Integration"
  BUILD_CONFIGURATION: "Release"

build:
  stage: build
  script:
    - echo "Restoring dependencies..."
    - dotnet restore $PROJECT_NAME
    - echo "Building the project..."
    - dotnet build $PROJECT_NAME --configuration $BUILD_CONFIGURATION --no-restore
  artifacts:
    paths:
      - $PROJECT_NAME/bin/$BUILD_CONFIGURATION/net9.0/
    expire_in: 1 week

test:
  stage: test
  script:
    - echo "Running unit tests..."
    - dotnet test $TEST_PROJECT_NAME --configuration $BUILD_CONFIGURATION --no-build
    - dotnet test $TEST_INTG_PROJECT_NAME --configuration $BUILD_CONFIGURATION --no-build
  dependencies:
    - build

publish:
  stage: publish
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - docker build -t "$CI_REGISTRY_IMAGE/prod:latest" ./Prod
    - docker push "$CI_REGISTRY_IMAGE/prod:latest"

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client docker-cli docker-compose-plugin
    - mkdir -p ~/.ssh
    - echo "$ENV_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan "$ENV_SSH_HOST" >> ~/.ssh/known_hosts
  script:
    - scp -o StrictHostKeyChecking=no docker-compose.yml "$ENV_SSH_USER@$ENV_SSH_HOST:/app/docker-compose.yml"
    - ssh -o StrictHostKeyChecking=no "$ENV_SSH_USER@$ENV_SSH_HOST" "
      echo '$CI_REGISTRY_PASSWORD' | docker login -u '$CI_REGISTRY_USER' --password-stdin '$CI_REGISTRY' &&
      docker compose -f /app/docker-compose.yml down &&
      docker compose -f /app/docker-compose.yml pull &&
      docker compose -f /app/docker-compose.yml up -d
      "
  
