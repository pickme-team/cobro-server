image: mcr.microsoft.com/dotnet/sdk:9.0

stages:
  - build
#  - test
  - publish
  - deploy
#  - integration-test

variables:
  PROJECT_NAME: "Prod"
  TEST_PROJECT_NAME: "Prod.Tests"
  TEST_INTG_PROJECT_NAME: "Prod.Tests.Integration"
  BUILD_CONFIGURATION: "Release"
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: "tcp://docker:2376"
  DOCKER_TLS_VERIFY: "1"
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  DOCKER_DRIVER: overlay2

build:
  stage: build
  script:
    - echo "Restoring dependencies..."
    - dotnet restore $PROJECT_NAME
    - echo "Building the project..."
    - dotnet build $PROJECT_NAME --configuration $BUILD_CONFIGURATION --no-restore
  artifacts:
    paths:
      - $PROJECT_NAME/bin/$BUILD_CONFIGURATION/net9.0/
    expire_in: 1 week

#test:
#  stage: test
#  script:
#    - echo "Running unit tests..."
#    - dotnet test $TEST_PROJECT_NAME --configuration $BUILD_CONFIGURATION --no-build
#  dependencies:
#    - build
#
#integration-test:
#  stage: integration-test
#  image: mcr.microsoft.com/dotnet/sdk:9.0
#  services:
#    - docker:dind
#  variables:
#    DOCKER_TLS_CERTDIR: "/certs"
#    DOCKER_HOST: "tcp://docker:2376"
#    DOCKER_TLS_VERIFY: "1"
#    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
#  before_script:
#    - apt-get update
#    - apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
#    - curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
#    - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
#    - apt-get update
#    - apt-get install -y docker-ce docker-ce-cli containerd.io
#    - docker info
#  script:
#    - echo "Running integration"
#    - dotnet test $TEST_INTG_PROJECT_NAME --configuration $BUILD_CONFIGURATION --no-build
#  dependencies:
#    - test

publish:
  stage: publish
  image: docker:latest
  services:
    - docker:dind
  before_script: 
    - docker info
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
    - docker build -t "$CI_REGISTRY_IMAGE/prod:latest" . -f Prod/Dockerfile
    - docker push "$CI_REGISTRY_IMAGE/prod:latest"

deploy:
  stage: deploy
  image: docker:latest
  variables:
    SSH_HOST: "192.168.0.1"
    SSH_USER: "ubuntu"
    SSH_ADDRESS: $ENV_SSH_USER@$ENV_SSH_HOST
  before_script:
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config && chmod 600 ~/.ssh/config
    - echo "$ENV_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa && chmod 400 ~/.ssh/id_rsa
    - head -n 5 ~/.ssh/id_rsa
      # Add the key to the SSH agent
    - eval $(ssh-agent -s)
    - ssh-agent sh -c "ssh-add ~/.ssh/id_rsa"
    - ssh-keyscan -H "$ENV_SSH_HOST"
  script:
    - scp -o StrictHostKeyChecking=no compose.yaml "$ENV_SSH_USER@$ENV_SSH_HOST:/home/ubuntu/compose.yaml"
    - scp -o StrictHostKeyChecking=no prometheus.yml "$ENV_SSH_USER@$ENV_SSH_HOST:/home/ubuntu/prometheus.yml"
    - scp -r -o StrictHostKeyChecking=no grafana "$ENV_SSH_USER@$ENV_SSH_HOST:/home/ubuntu/grafana"
    - ssh -o StrictHostKeyChecking=no "$ENV_SSH_USER@$ENV_SSH_HOST" "
      echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin &&
      docker compose -f /home/ubuntu/compose.yaml down &&
      docker compose -f /home/ubuntu/compose.yaml pull &&
      docker compose -f /home/ubuntu/compose.yaml up -d
      "
  
